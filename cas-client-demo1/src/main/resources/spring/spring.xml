<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://mybatis.org/schema/mybatis-spring
        http://mybatis.org/schema/mybatis-spring.xsd"
       default-lazy-init="false">
    
    <context:annotation-config />
	<context:component-scan base-package="com.wenbo.ding.cas" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan> 

   	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.wenbo.ding.cas.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.wenbo.ding.cas.repository" />
	</bean>
	
   	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
    
    <!-- 注意下面proxy-target-class属性决定是基于接口的还是基于类的代理被创建。如果proxy-target-class 属性值被设置为true，
	    那么基于类的代理将起作用（这时需要cglib库）。如果proxy-target-class属值被设置为false或者这个属性被省略，那么就默认采用
	    基于jdk 的接口的动态代理。 -->
    <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
	
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
        	<tx:method name="insert*" propagation="REQUIRED" />
        	<tx:method name="update*" propagation="REQUIRED" />
        	<tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="*" propagation="REQUIRED" read-only="true" rollback-for="java.lang.RuntionException"/>
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true" proxy-target-class="true">
        <aop:pointcut id="txPointcut" expression="execution(* cn.wenbo.ding.cas.service.impl.*.*(..))"/>
        <aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config> 
    
    <import resource="classpath*:/spring/spring-mysql-context.xml" />
    <import resource="classpath*:/spring/spring-shiro.xml"/>
</beans>